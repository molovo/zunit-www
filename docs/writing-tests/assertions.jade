---
title: Assertions
description: Use ZUnit's assertion library for fine-grained control over your test logic
seq: 1
---

extends /layouts/_docs

block docs-content
  section
    :marked
      ZUnit's powerful assertion library provides a series of methods enabling you to compare values within your tests. Here is a full list of all the methods available to you.

  feature

  section
    :marked
      ### equals

      Compares two integers to ensure that they are equal, and fails the test if they are not.

  feature.bump
    :marked
      ```zunit
      assert 1 equals 1
      ```

  section
    :marked
      ### not_equal_to

      Compares two integers to ensure that they are not equal, and fails the test if they are.

  feature.bump
    :marked
      ```zunit
      assert 1 not_equal_to 0
      ```

  section
    :marked
      ### is_positive

      Checks an integer to ensure that it is positive, and fails the test if it is not.

  feature.bump
    :marked
      ```zunit
      assert 1 is_positive
      ```

  section
    :marked
      ### is_negative

      Checks an integer to ensure that it is negative, and fails the test if it is not.

  feature.bump
    :marked
      ```zunit
      assert -1 is_negative
      ```

  section
    :marked
      ### is_greater_than

      Compares two integers to ensure one is greater, and fails the test if it is not.

  feature.bump
    :marked
      ```zunit
      assert 2 is_greater_than 1
      ```

  section
    :marked
      ### is_less_than

      Compares two integers to ensure one is lesser, and fails the test if it is not.

  feature.bump
    :marked
      ```zunit
      assert 1 is_less_than 2
      ```

  section
    :marked
      ### same_as

      Compares two strings to ensure that they are equal, and fails the test if they are not

  feature.bump
    :marked
      ```zunit
      assert 'Rainbows!' same_as 'Rainbows!'
      ```

  section
    :marked
      ### different_to

      Compares two strings to ensure that they are different, and fails the test if they are not

  feature.bump
    :marked
      ```zunit
      assert 'Rainbows' different_to 'Unicorns!'
      ```

  section
    :marked
      ### is_empty

      Checks that the value passed is empty or undefined, and fails the test if it contains a value.

  feature.bump
    :marked
      ```zunit
      assert '' is_empty
      ```

  section
    :marked
      ### is_not_empty

      Checks that the value passed contains something, and fails the test if it is empty or undefined.

  feature.bump
    :marked
      ```zunit
      assert 'Rainbows!' is_not_empty
      ```

  section
    :marked
      ### is_substring_of

      Searches for the value within a defined string, and fails if it is not found.

  feature.bump
    :marked
      ```zunit
      assert 'unicorns' is_substring_of 'I love unicorns!'
      ```

  section
    :marked
      ### is_not_substring_of

      Searches for the value within a defined string, and fails if it is found.

  feature.bump
    :marked
      ```zunit
      assert 'unicorns' is_not_substring_of 'I love rainbows!'
      ```

  section
    :marked
      ### matches

      Compares the value against a PCRE-compliant regular expression, and fails the test if it does not match.

  feature.bump
    :marked
      ```zunit
      assert 'unicorns' matches '[a-z]{8}'
      ```


  section
    :marked
      ### does_not_match

      Compares the value against a PCRE-compliant regular expression, and fails the test if it matches.

  feature.bump
    :marked
      ```zunit
      assert 'unicorns' does_not_match '[0-9]+'
      ```

  section
    :marked
      ### in

      Search for the value in a list or array of values, and fails the test if it is not found.

  feature.bump
    :marked
      ```zunit
      assert 'a' in 'a' 'b' 'c'
      ```

  section
    :marked
      ### not_in

      Search for the value in a list or array of values, and fails the test if it is found.

  feature.bump
    :marked
      ```zunit
      assert 'a' not_in 'x' 'y' 'z'
      ```

  section
    :marked
      ### is_key_in

      Searches for the value within the keys of the provided hash, and fails the test if it is not found.

  feature.bump
    :marked
      ```zunit
      typeset -A hash; hash=(
        'a' 1
        'b' 2
        'c' 3
      )
      assert 'a' is_key_in ${(@kv)hash}
      ```

  section
    :marked
      ### is_not_key_in

      Searches for the value within the keys of the provided hash, and fails the test if it is found.

  feature.bump
    :marked
      ```zunit
      typeset -A hash; hash=(
        'x' 1
        'y' 2
        'z' 3
      )
      assert 'a' is_not_key_in ${(@kv)hash}
      ```

  section
    :marked
      ### is_value_in

      Searches for the value within the values of the provided hash, and fails the test if it is not found.

  feature.bump
    :marked
      ```zunit
      typeset -A hash; hash=(
        'a' 1
        'b' 2
        'c' 3
      )
      assert 1 is_value_in ${(@kv)hash}
      ```

  section
    :marked
      ### is_not_value_in

      Searches for the value within the values of the provided hash, and fails the test if it is found.

  feature.bump
    :marked
      ```zunit
      typeset -A hash; hash=(
        'x' 1
        'y' 2
        'z' 3
      )
      assert 4 is_not_value_in ${(@kv)hash}
      ```

  section
    :marked
      ### exists

      Searches the filesystem for the given path, and fails the test if it does not exist.

  feature.bump
    :marked
      ```zunit
      assert /path/to/a/file exists
      ```

  section
    :marked
      ### is_file

      Searches the filesystem for the given path, and fails the test if it does not exist, or is not a file.

  feature.bump
    :marked
      ```zunit
      assert /path/to/a/file is_file
      ```

  section
    :marked
      ### is_dir

      Searches the filesystem for the given path, and fails the test if it does not exist, or is not a directory.

  feature.bump
    :marked
      ```zunit
      assert /path/to/a/directory is_dir
      ```

  section
    :marked
      ### is_link

      Searches the filesystem for the given path, and fails the test if it does not exist, or is not a symbolic link.

  feature.bump
    :marked
      ```zunit
      assert /path/to/a/symlink is_link
      ```

  section
    :marked
      ### is_readable

      Searches the filesystem for the given path, and fails the test if it does not exist, or is not readable.

  feature.bump
    :marked
      ```zunit
      assert /path/to/a/file is_readable
      ```

  section
    :marked
      ### is_writable

      Searches the filesystem for the given path, and fails the test if it does not exist, or is not writable.

  feature.bump
    :marked
      ```zunit
      assert /path/to/a/file is_writable
      ```

  section
    :marked
      ### is_executable

      Searches the filesystem for the given path, and fails the test if it does not exist, or is not executable.

  feature.bump
    :marked
      ```zunit
      assert /path/to/a/file is_executable
      ```
